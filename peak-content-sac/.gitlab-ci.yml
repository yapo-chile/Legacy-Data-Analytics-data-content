# One .gitlab-ci.yml file for each project must be present.
# In order to run the docker-pipeline-template, a Dockerfile symlink must be placed
# into data-content/peak-content-sac/Dockerfile (`ln -s ./app/dockerfile ./Dockerfile`).

# TODO: build and push a Docker image to the GitLab package registry.

workflow:
  rules:
    - if: '$CI_COMMIT_MESSAGE =~ /peak-content-sac$/'
    - if: '$SUBFOLDER == "peak-content-sac"'

"download-secrets:peak-content-sac":
  image: google/cloud-sdk
  stage: inject-secrets
  artifacts:
    paths:
      - peak-content-sac/app/db-secret
      - peak-content-sac/app/zendesk-api-secret
      - peak-content-sac/app/surveypal-api-secret
  before_script:
    - echo "$BASE64_GOOGLE_SECRET_MANAGER_CREDENTIALS" | base64 --decode > ${HOME}/gcloud-service-key.json
    - gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json
  script:
    - cd ./peak-content-sac/
    - gcloud secrets versions access latest --project=${GOOGLE_SECRET_MANAGER_PROJECT_ID} --secret="rundeck-APP_DW_SECRET" > ./app/db-secret
    - gcloud secrets versions access latest --project=${GOOGLE_SECRET_MANAGER_PROJECT_ID} --secret="rundeck-APP_ZENDESK_API_SECRET" > ./app/zendesk-api-secret
    - gcloud secrets versions access latest --project=${GOOGLE_SECRET_MANAGER_PROJECT_ID} --secret="rundeck-APP_SURVEYPAL_API_SECRET" > ./app/surveypal-api-secret

"docker-push-release:peak-content-sac":
  extends: .docker-push-release
  dependencies: 
    - download-secrets:peak-content-sac
  only:
    - master
  variables:
    CI_COMMIT_REF_NAME: "${CI_COMMIT_REF_NAME}_peak-content-sac"
    CI_COMMIT_SHORT_SHA: "${CI_COMMIT_SHORT_SHA}_peak-content-sac"
    IMAGE_TAG: "${CI_COMMIT_SHORT_SHA}"
  before_script:
    - cd ./peak-content-sac/
    - sleep 5
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY